{"ast":null,"code":"var _jsxFileName = \"/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useGameInfo } from \"../../context/GameContext\";\nimport \"./Board.css\";\nimport Card from \"../CardComponent/Card\";\nimport variableService from \"../../services/variableService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const {\n    deck,\n    setDeck,\n    couplesFound,\n    setCouplesFound,\n    firstCard,\n    setFirstCard,\n    secondCard,\n    setSecondCard,\n    setTurns\n  } = useGameInfo();\n  const [disabled, setDisabled] = useState(false);\n\n  //handle the card choice depending on how many deck you clicked\n  const handleChoice = card => {\n    setDeck(deck.map(obj => {\n      if (obj.key === card.key) {\n        return {\n          ...obj,\n          match: variableService.getStuatusCard().SELECTED\n        };\n      }\n      return obj;\n    }));\n    firstCard ? setSecondCard(card) : setFirstCard(card);\n  };\n\n  //reset the turn variables\n  const resetTurns = () => {\n    setDeck(deck.map(obj => {\n      if (obj.match === variableService.getStuatusCard().SELECTED) {\n        return {\n          ...obj,\n          match: variableService.getStuatusCard().WRONG\n        };\n      }\n      return obj;\n    }));\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  //\"it is a match\" logic\n  //add +1 couples found\n  //update the deck with the \"selected\" variable set to true\n  const isMatch = () => {\n    setCouplesFound(couplesFound + 1);\n    setDeck(_cards => {\n      return _cards.map(card => {\n        if (card.id === firstCard.id) {\n          return {\n            ...card,\n            match: variableService.getStuatusCard().CORRECT\n          };\n        } else {\n          return card;\n        }\n      });\n    });\n    //reset the turn\n    resetTurns();\n  };\n  const checkIfMatch = () => {\n    //with disabled true you cannot click the card\n    setDisabled(true);\n    //if the card id is equal to the porevious choice id\n    if (firstCard.id === secondCard.id) {\n      //is a match\n      isMatch();\n    } else {\n      //wait 1 sec to reset the turn\n      setTimeout(() => resetTurns(), 1000);\n    }\n    //set next turn\n    setTurns(_prev => _prev + 1);\n  };\n  useEffect(() => {\n    console.log(deck);\n  }, [deck]);\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      checkIfMatch();\n    }\n  }, [firstCard, secondCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-grid\",\n    children: deck.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      handleChoice: handleChoice,\n      flipped: card === firstCard || card === secondCard || card.match === variableService.getStuatusCard().CORRECT || card.match === variableService.getStuatusCard().SELECTED,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"PF3nsTiGlGVlwO5r87cswGH+qn4=\", false, function () {\n  return [useGameInfo];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","useGameInfo","Card","variableService","jsxDEV","_jsxDEV","Board","_s","deck","setDeck","couplesFound","setCouplesFound","firstCard","setFirstCard","secondCard","setSecondCard","setTurns","disabled","setDisabled","handleChoice","card","map","obj","key","match","getStuatusCard","SELECTED","resetTurns","WRONG","isMatch","_cards","id","CORRECT","checkIfMatch","setTimeout","_prev","console","log","className","children","flipped","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useGameInfo } from \"../../context/GameContext\";\nimport \"./Board.css\";\nimport Card from \"../CardComponent/Card\";\nimport variableService from \"../../services/variableService\";\n\nexport default function Board() {\n  const {\n    deck,\n    setDeck,\n    couplesFound,\n    setCouplesFound,\n    firstCard,\n    setFirstCard,\n    secondCard,\n    setSecondCard,\n    setTurns,\n  } = useGameInfo();\n\n  const [disabled, setDisabled] = useState(false);\n\n  //handle the card choice depending on how many deck you clicked\n  const handleChoice = (card) => {\n    setDeck(\n      deck.map((obj) => {\n        if (obj.key === card.key) {\n          return { ...obj, match: variableService.getStuatusCard().SELECTED };\n        }\n        return obj;\n      })\n    );\n\n    firstCard ? setSecondCard(card) : setFirstCard(card);\n  };\n\n  //reset the turn variables\n  const resetTurns = () => {\n    setDeck(\n      deck.map((obj) => {\n        if (obj.match === variableService.getStuatusCard().SELECTED) {\n          return { ...obj, match: variableService.getStuatusCard().WRONG };\n        }\n        return obj;\n      })\n    );\n\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  //\"it is a match\" logic\n  //add +1 couples found\n  //update the deck with the \"selected\" variable set to true\n  const isMatch = () => {\n    setCouplesFound(couplesFound + 1);\n    setDeck((_cards) => {\n      return _cards.map((card) => {\n        if (card.id === firstCard.id) {\n          return {\n            ...card,\n            match: variableService.getStuatusCard().CORRECT,\n          };\n        } else {\n          return card;\n        }\n      });\n    });\n    //reset the turn\n    resetTurns();\n  };\n\n  const checkIfMatch = () => {\n    //with disabled true you cannot click the card\n    setDisabled(true);\n    //if the card id is equal to the porevious choice id\n    if (firstCard.id === secondCard.id) {\n      //is a match\n      isMatch();\n    } else {\n      //wait 1 sec to reset the turn\n      setTimeout(() => resetTurns(), 1000);\n    }\n    //set next turn\n    setTurns((_prev) => _prev + 1);\n  };\n\n  useEffect(() => {\n    console.log(deck);\n  }, [deck]);\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      checkIfMatch();\n    }\n  }, [firstCard, secondCard]);\n\n  return (\n    <div className=\"board-grid\">\n      {deck.map((card) => (\n        <Card\n          card={card}\n          handleChoice={handleChoice}\n          flipped={\n            card === firstCard ||\n            card === secondCard ||\n            card.match === variableService.getStuatusCard().CORRECT ||\n            card.match === variableService.getStuatusCard().SELECTED\n          }\n          disabled={disabled}\n        ></Card>\n      ))}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}