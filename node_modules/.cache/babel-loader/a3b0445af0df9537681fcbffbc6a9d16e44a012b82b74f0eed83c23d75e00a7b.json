{"ast":null,"code":"var _jsxFileName = \"/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../CardComponent/Card\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(_ref) {\n  _s();\n  let {\n    nextTurn\n  } = _ref;\n  const [disabled, setDisabled] = useState(false);\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setDisabled(false);\n  };\n  const checkWin = element => {\n    console.log(\"ELEMENT: \", element.matched);\n    return element.matched === true;\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"IT'S A MATCH\");\n        setCouplesFound(coupleFound + 1);\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        setTimeout(() => resetTurns(), 1000);\n      }\n      nextTurn();\n      console.log(\"Win: \", cards.every(checkWin));\n    }\n  }, [choiceOne, choiceTwo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-grid\",\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      handleChoice: handleChoice,\n      flipped: card === choiceOne || card === choiceTwo || card.matched,\n      disabled: disabled\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"I+qTnlah4BrlbZpJmx/XQaEiH80=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","Board","_ref","_s","nextTurn","disabled","setDisabled","handleChoice","card","choiceOne","setChoiceTwo","setChoiceOne","resetTurns","checkWin","element","console","log","matched","choiceTwo","src","setCouplesFound","coupleFound","setCards","prevCards","map","setTimeout","cards","every","className","children","flipped","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Card from \"../CardComponent/Card\";\nimport \"./Board.css\";\n\nexport default function Board({ nextTurn }) {\n  const [disabled, setDisabled] = useState(false);\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setDisabled(false);\n  };\n\n  const checkWin = (element) => {\n    console.log(\"ELEMENT: \", element.matched);\n    return element.matched === true;\n  };\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"IT'S A MATCH\");\n        setCouplesFound(coupleFound + 1);\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        setTimeout(() => resetTurns(), 1000);\n      }\n      nextTurn();\n\n      console.log(\"Win: \", cards.every(checkWin));\n    }\n  }, [choiceOne, choiceTwo]);\n\n  return (\n    <div className=\"board-grid\">\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          card={card}\n          handleChoice={handleChoice}\n          flipped={card === choiceOne || card === choiceTwo || card.matched}\n          disabled={disabled}\n        ></Card>\n      ))}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,eAAe,SAASC,KAAKA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACxC,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,YAAY,GAAIC,IAAI,IAAK;IAC7BC,SAAS,GAAGC,YAAY,CAACF,IAAI,CAAC,GAAGG,YAAY,CAACH,IAAI,CAAC;EACrD,CAAC;EAED,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACvBD,YAAY,CAAC,IAAI,CAAC;IAClBD,YAAY,CAAC,IAAI,CAAC;IAClBJ,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMO,QAAQ,GAAIC,OAAO,IAAK;IAC5BC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,OAAO,CAACG,OAAO,CAAC;IACzC,OAAOH,OAAO,CAACG,OAAO,KAAK,IAAI;EACjC,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd,IAAIa,SAAS,IAAIS,SAAS,EAAE;MAC1BZ,WAAW,CAAC,IAAI,CAAC;MACjB,IAAIG,SAAS,CAACU,GAAG,KAAKD,SAAS,CAACC,GAAG,EAAE;QACnCJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BI,eAAe,CAACC,WAAW,GAAG,CAAC,CAAC;QAChCC,QAAQ,CAAEC,SAAS,IAAK;UACtB,OAAOA,SAAS,CAACC,GAAG,CAAEhB,IAAI,IAAK;YAC7B,IAAIA,IAAI,CAACW,GAAG,KAAKV,SAAS,CAACU,GAAG,EAAE;cAC9B,OAAO;gBAAE,GAAGX,IAAI;gBAAES,OAAO,EAAE;cAAK,CAAC;YACnC,CAAC,MAAM;cACL,OAAOT,IAAI;YACb;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;QACFI,UAAU,EAAE;MACd,CAAC,MAAM;QACLa,UAAU,CAAC,MAAMb,UAAU,EAAE,EAAE,IAAI,CAAC;MACtC;MACAR,QAAQ,EAAE;MAEVW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEU,KAAK,CAACC,KAAK,CAACd,QAAQ,CAAC,CAAC;IAC7C;EACF,CAAC,EAAE,CAACJ,SAAS,EAAES,SAAS,CAAC,CAAC;EAE1B,oBACElB,OAAA;IAAK4B,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBH,KAAK,CAACF,GAAG,CAAEhB,IAAI,iBACdR,OAAA,CAACF,IAAI;MAEHU,IAAI,EAAEA,IAAK;MACXD,YAAY,EAAEA,YAAa;MAC3BuB,OAAO,EAAEtB,IAAI,KAAKC,SAAS,IAAID,IAAI,KAAKU,SAAS,IAAIV,IAAI,CAACS,OAAQ;MAClEZ,QAAQ,EAAEA;IAAS,GAJdG,IAAI,CAACuB,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAChC,EAAA,CAxDuBF,KAAK;AAAAmC,EAAA,GAALnC,KAAK;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}