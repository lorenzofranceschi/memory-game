{"ast":null,"code":"var _jsxFileName = \"/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../CardComponent/Card\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(_ref) {\n  _s();\n  let {\n    cards,\n    nextTurn,\n    setCards\n  } = _ref;\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const handleChoice = card => {\n    console.log(card);\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    nextTurn();\n    setDisabled(false);\n  };\n  useEffect(() => {\n    setDisabled(true);\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"IT'S A MATCH\");\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        console.log(\"IT'S NOT A MATCH\");\n        setTimeout(() => resetTurns(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-grid\",\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      handleChoice: handleChoice,\n      flipped: card === choiceOne || card === choiceTwo || card.matched,\n      disabled: disabled\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"g/a1IDv/t22vFpK7ADINJCuL4/o=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","Board","_ref","_s","cards","nextTurn","setCards","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","handleChoice","card","console","log","resetTurns","src","prevCards","map","matched","setTimeout","className","children","flipped","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Card from \"../CardComponent/Card\";\nimport \"./Board.css\";\n\nexport default function Board({ cards, nextTurn, setCards }) {\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleChoice = (card) => {\n    console.log(card);\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    nextTurn();\n    setDisabled(false);\n  };\n\n  useEffect(() => {\n    setDisabled(true);\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"IT'S A MATCH\");\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        console.log(\"IT'S NOT A MATCH\");\n        setTimeout(() => resetTurns(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  return (\n    <div className=\"board-grid\">\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          card={card}\n          handleChoice={handleChoice}\n          flipped={card === choiceOne || card === choiceTwo || card.matched}\n          disabled={disabled}\n        ></Card>\n      ))}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,eAAe,SAASC,KAAKA,CAAAC,IAAA,EAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAAJ,IAAA;EACzD,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMgB,YAAY,GAAIC,IAAI,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBP,SAAS,GAAGG,YAAY,CAACI,IAAI,CAAC,GAAGN,YAAY,CAACM,IAAI,CAAC;EACrD,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBT,YAAY,CAAC,IAAI,CAAC;IAClBE,YAAY,CAAC,IAAI,CAAC;IAClBL,QAAQ,EAAE;IACVO,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACdgB,WAAW,CAAC,IAAI,CAAC;IACjB,IAAIL,SAAS,IAAIE,SAAS,EAAE;MAC1B,IAAIF,SAAS,CAACW,GAAG,KAAKT,SAAS,CAACS,GAAG,EAAE;QACnCH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BV,QAAQ,CAAEa,SAAS,IAAK;UACtB,OAAOA,SAAS,CAACC,GAAG,CAAEN,IAAI,IAAK;YAC7B,IAAIA,IAAI,CAACI,GAAG,KAAKX,SAAS,CAACW,GAAG,EAAE;cAC9B,OAAO;gBAAE,GAAGJ,IAAI;gBAAEO,OAAO,EAAE;cAAK,CAAC;YACnC,CAAC,MAAM;cACL,OAAOP,IAAI;YACb;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;QACFG,UAAU,EAAE;MACd,CAAC,MAAM;QACLF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BM,UAAU,CAAC,MAAML,UAAU,EAAE,EAAE,IAAI,CAAC;MACtC;IACF;EACF,CAAC,EAAE,CAACV,SAAS,EAAEE,SAAS,CAAC,CAAC;EAE1B,oBACET,OAAA;IAAKuB,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBpB,KAAK,CAACgB,GAAG,CAAEN,IAAI,iBACdd,OAAA,CAACF,IAAI;MAEHgB,IAAI,EAAEA,IAAK;MACXD,YAAY,EAAEA,YAAa;MAC3BY,OAAO,EAAEX,IAAI,KAAKP,SAAS,IAAIO,IAAI,KAAKL,SAAS,IAAIK,IAAI,CAACO,OAAQ;MAClEV,QAAQ,EAAEA;IAAS,GAJdG,IAAI,CAACY,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAC3B,EAAA,CArDuBF,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}