{"ast":null,"code":"var _jsxFileName = \"/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useGameInfo } from \"../../context/GameContext\";\nimport \"./Board.css\";\nimport Card from \"../CardComponent/Card\";\nimport variableService from \"../../services/variableService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const {\n    deck,\n    setDeck,\n    couplesFound,\n    setCouplesFound,\n    firstCard,\n    setFirstCard,\n    secondCard,\n    setSecondCard,\n    setTurns\n  } = useGameInfo();\n  const [disabled, setDisabled] = useState(false);\n\n  //handle the card choice depending on how many deck you clicked\n  const handleChoice = card => {\n    //firstCard ? setSecondCard(card) : setFirstCard(card);\n  };\n\n  //reset the turn variables\n  const resetTurns = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  //\"it is a match\" logic\n  //add +1 couples found\n  //update the deck with the \"selected\" variable set to true\n  const isMatch = () => {\n    setCouplesFound(couplesFound + 1);\n    setDeck(_cards => {\n      return _cards.map(card => {\n        if (card.id === firstCard.id) {\n          return {\n            ...card,\n            selected: variableService.getStuatusCard().MACTHED\n          };\n        } else {\n          return card;\n        }\n      });\n    });\n    //reset the turn\n    resetTurns();\n  };\n  const checkIfMatch = () => {\n    //with disabled true you cannot click the card\n    setDisabled(true);\n    //if the card id is equal to the porevious choice id\n    if (firstCard.id === secondCard.id) {\n      //is a match\n      isMatch();\n    } else {\n      //wait 1 sec to reset the turn\n      setTimeout(() => resetTurns(), 1000);\n    }\n    //set next turn\n    setTurns(_prev => _prev + 1);\n  };\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      checkIfMatch();\n    }\n  }, [firstCard, secondCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-grid\",\n    children: deck.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      handleChoice: handleChoice,\n      flipped: card === firstCard || card === secondCard || card.selected === variableService.getStuatusCard().SELECTED,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"fm3f5K8LGl4nba4AAs70ExMhk9Y=\", false, function () {\n  return [useGameInfo];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","useGameInfo","Card","variableService","jsxDEV","_jsxDEV","Board","_s","deck","setDeck","couplesFound","setCouplesFound","firstCard","setFirstCard","secondCard","setSecondCard","setTurns","disabled","setDisabled","handleChoice","card","resetTurns","isMatch","_cards","map","id","selected","getStuatusCard","MACTHED","checkIfMatch","setTimeout","_prev","className","children","flipped","SELECTED","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lorenzofranceschi/Projects/MemoryGame/memory/src/components/BoardCompoent/Board.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useGameInfo } from \"../../context/GameContext\";\nimport \"./Board.css\";\nimport Card from \"../CardComponent/Card\";\nimport variableService from \"../../services/variableService\";\n\nexport default function Board() {\n  const {\n    deck,\n    setDeck,\n    couplesFound,\n    setCouplesFound,\n    firstCard,\n    setFirstCard,\n    secondCard,\n    setSecondCard,\n    setTurns,\n  } = useGameInfo();\n\n  const [disabled, setDisabled] = useState(false);\n\n  //handle the card choice depending on how many deck you clicked\n  const handleChoice = (card) => {\n    //firstCard ? setSecondCard(card) : setFirstCard(card);\n  };\n\n  //reset the turn variables\n  const resetTurns = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  //\"it is a match\" logic\n  //add +1 couples found\n  //update the deck with the \"selected\" variable set to true\n  const isMatch = () => {\n    setCouplesFound(couplesFound + 1);\n    setDeck((_cards) => {\n      return _cards.map((card) => {\n        if (card.id === firstCard.id) {\n          return {\n            ...card,\n            selected: variableService.getStuatusCard().MACTHED,\n          };\n        } else {\n          return card;\n        }\n      });\n    });\n    //reset the turn\n    resetTurns();\n  };\n\n  const checkIfMatch = () => {\n    //with disabled true you cannot click the card\n    setDisabled(true);\n    //if the card id is equal to the porevious choice id\n    if (firstCard.id === secondCard.id) {\n      //is a match\n      isMatch();\n    } else {\n      //wait 1 sec to reset the turn\n      setTimeout(() => resetTurns(), 1000);\n    }\n    //set next turn\n    setTurns((_prev) => _prev + 1);\n  };\n\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      checkIfMatch();\n    }\n  }, [firstCard, secondCard]);\n\n  return (\n    <div className=\"board-grid\">\n      {deck.map((card) => (\n        <Card\n          card={card}\n          handleChoice={handleChoice}\n          flipped={\n            card === firstCard ||\n            card === secondCard ||\n            card.selected === variableService.getStuatusCard().SELECTED\n          }\n          disabled={disabled}\n        ></Card>\n      ))}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAO,aAAa;AACpB,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,eAAe,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IACJC,IAAI;IACJC,OAAO;IACPC,YAAY;IACZC,eAAe;IACfC,SAAS;IACTC,YAAY;IACZC,UAAU;IACVC,aAAa;IACbC;EACF,CAAC,GAAGf,WAAW,EAAE;EAEjB,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMmB,YAAY,GAAIC,IAAI,IAAK;IAC7B;EAAA,CACD;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBR,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC,IAAI,CAAC;IACnBG,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;;EAED;EACA;EACA;EACA,MAAMI,OAAO,GAAGA,CAAA,KAAM;IACpBX,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;IACjCD,OAAO,CAAEc,MAAM,IAAK;MAClB,OAAOA,MAAM,CAACC,GAAG,CAAEJ,IAAI,IAAK;QAC1B,IAAIA,IAAI,CAACK,EAAE,KAAKb,SAAS,CAACa,EAAE,EAAE;UAC5B,OAAO;YACL,GAAGL,IAAI;YACPM,QAAQ,EAAEvB,eAAe,CAACwB,cAAc,EAAE,CAACC;UAC7C,CAAC;QACH,CAAC,MAAM;UACL,OAAOR,IAAI;QACb;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF;IACAC,UAAU,EAAE;EACd,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAX,WAAW,CAAC,IAAI,CAAC;IACjB;IACA,IAAIN,SAAS,CAACa,EAAE,KAAKX,UAAU,CAACW,EAAE,EAAE;MAClC;MACAH,OAAO,EAAE;IACX,CAAC,MAAM;MACL;MACAQ,UAAU,CAAC,MAAMT,UAAU,EAAE,EAAE,IAAI,CAAC;IACtC;IACA;IACAL,QAAQ,CAAEe,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;EAChC,CAAC;EAEDhC,SAAS,CAAC,MAAM;IACd,IAAIa,SAAS,IAAIE,UAAU,EAAE;MAC3Be,YAAY,EAAE;IAChB;EACF,CAAC,EAAE,CAACjB,SAAS,EAAEE,UAAU,CAAC,CAAC;EAE3B,oBACET,OAAA;IAAK2B,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBzB,IAAI,CAACgB,GAAG,CAAEJ,IAAI,iBACbf,OAAA,CAACH,IAAI;MACHkB,IAAI,EAAEA,IAAK;MACXD,YAAY,EAAEA,YAAa;MAC3Be,OAAO,EACLd,IAAI,KAAKR,SAAS,IAClBQ,IAAI,KAAKN,UAAU,IACnBM,IAAI,CAACM,QAAQ,KAAKvB,eAAe,CAACwB,cAAc,EAAE,CAACQ,QACpD;MACDlB,QAAQ,EAAEA;IAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAChC,EAAA,CArFuBD,KAAK;EAAA,QAWvBL,WAAW;AAAA;AAAAuC,EAAA,GAXOlC,KAAK;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}